i1hap <- as.integer(substr(data[[individual1]], 3, 3))
print("else")
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
print("if")
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
print("else")
}
print(i1hap)
print(i2hap)
print(sum(!(i1hap & i2hap))/length(i1hap)
}
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
print(individual1)
print(individual2)
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
print("if")
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
print("else")
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
print("if")
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
print("else")
}
print(i1hap)
print(i2hap)
print(sum(!(i1hap & i2hap)))/length(i1hap)
}
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
print(sum(!(i1hap & i2hap)))/length(i1hap)
}
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
print(sum(!(i1hap & i2hap))/length(i1hap))
}
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
print(sum(!(i1hap & i2hap)))
print(sum(!(i1hap & i2hap))/length(i1hap))
}
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv("NA06984", "NA06989")
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
print(length(i1hap))
print(length(i2hap))
print(sum(!(i1hap & i2hap)))
print(sum(!(i1hap & i2hap))/length(i1hap))
}
pairwiseDiv("NA06984", "NA06989")
columnNames = colnames(data)
columnNames
euroPop = columnNames[10:90]
euroPop
afrPop = columnNames[91:179]
afrPop
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
print(sum(!(i1hap & i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2=NULL){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( indivSet2 != NULL ){
individual2 <- sample(indivSet2, 1)
} else{
individual2 <- sample(indivSet1, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
print(mean(divVec))
print(sd(divVec))
}
avgPairwiseDiv(10, euroPop)
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
print(mean(divVec))
print(sd(divVec))
}
avgPairwiseDiv(10, euroPop)
avgPairwiseDiv(10, afrPop)
avgPairwiseDiv(10, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum(!(i1hap & i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
print("1 pair done")
}
print(mean(divVec))
print(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum(!(i1hap & i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
print("Mean: ", mean(divVec))
print("Standard dev: ", sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
# Takes in 2 individuals (by name) and outputs the pairwise nucleotide diversity between one haplotype from each of these individuals
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum(!(i1hap & i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
print(mean(divVec))
print(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
print("Mean: ", end="")
print(mean(divVec))
print("Standard dev: ", end="")
print(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("Standard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap & i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(10, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap != i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(100, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap == i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(100, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap == i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap != i2hap))/(length(i1hap) * 10))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
pairwiseDiv <- function(individual1, individual2){
if( sample(1:2, 1) == 1 ){
i1hap <- as.integer(substr(data[[individual1]], 1, 1))
} else{
i1hap <- as.integer(substr(data[[individual1]], 3, 3))
}
if( sample(1:2, 1) == 1 ){
i2hap <- as.integer(substr(data[[individual2]], 1, 1))
} else{
i2hap <- as.integer(substr(data[[individual2]], 3, 3))
}
return(sum((i1hap != i2hap))/length(i1hap))
}
avgPairwiseDiv <- function(numPairs, indivSet1, indivSet2){
divVec <- vector(mode="numeric", length=0)
for( i in 1:numPairs ){
individual1 <- sample(indivSet1, 1)
if( missing(indivSet2) ){
individual2 <- sample(indivSet1, 1)
} else{
individual2 <- sample(indivSet2, 1)
}
divVec[i] = pairwiseDiv(individual1, individual2)
}
cat("Mean: ")
cat(mean(divVec))
cat("\nStandard dev: ")
cat(sd(divVec))
}
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, euroPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
avgPairwiseDiv(100, euroPop, afrPop)
